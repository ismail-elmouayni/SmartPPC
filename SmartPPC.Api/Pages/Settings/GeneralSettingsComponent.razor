@using SmartPPC.Core.Model.DDMRP
@using SmartPPC.Api.Services
@inject ConfigurationService ConfigService
@inject ConfigurationStateService StateService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudPaper Class="pa-6" Elevation="2">
    <MudText Typo="Typo.h6" Class="mb-4">Planning Horizons</MudText>

    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="ModelInputs.PlanningHorizon"
                                 Label="Planning Horizon"
                                 Variant="Variant.Outlined"
                                 Min="1"
                                 Required="true"
                                 RequiredError="Planning Horizon is required"
                                 HelperText="Number of periods for planning" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="ModelInputs.PeakHorizon"
                                 Label="Peak Horizon"
                                 Variant="Variant.Outlined"
                                 Min="1"
                                 Required="true"
                                 RequiredError="Peak Horizon is required"
                                 HelperText="Number of periods to consider for peak detection" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="ModelInputs.PastHorizon"
                                 Label="Past Horizon"
                                 Variant="Variant.Outlined"
                                 Min="1"
                                 Required="true"
                                 RequiredError="Past Horizon is required"
                                 HelperText="Number of past periods to track" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="ModelInputs.PeakThreshold"
                                 Label="Peak Threshold"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 HelperText="Threshold for peak identification (optional)" />
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-6" />

        <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
            <MudButton Variant="Variant.Outlined" Color="MudColor.Default" OnClick="OnCancel">
                Cancel
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="MudColor.Primary" OnClick="OnSave" Disabled="!success">
                Save Configuration
            </MudButton>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public ModelInputs ModelInputs { get; set; } = new ModelInputs();

    private MudForm form;
    private bool success;

    private async Task OnSave()
    {
        try
        {
            await form.Validate();

            if (!success)
            {
                Snackbar.Add("Please correct the validation errors", Severity.Error);
                return;
            }

            // Check if a configuration is loaded
            if (!StateService.HasConfiguration)
            {
                Snackbar.Add("No configuration loaded. Please load or create a configuration from the Dashboard first.", Severity.Warning);
                return;
            }

            // Validate configuration
            ConfigService.ValidateConfiguration(ModelInputs);

            // Save to database
            if (StateService.CurrentConfigId.HasValue)
            {
                await ConfigService.UpdateConfigurationInDatabaseAsync(
                    StateService.CurrentConfigId.Value,
                    ModelInputs,
                    setAsActive: true);

                // Update state service with the saved configuration
                StateService.UpdateConfiguration(ModelInputs);

                Snackbar.Add("Configuration saved successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Configuration ID not found. Please reload the configuration from the Dashboard.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving configuration: {ex.Message}", Severity.Error);
        }
    }

    private void OnCancel()
    {
        Navigation.NavigateTo("/Settings/GeneralSettings", forceLoad: true);
    }
}
