<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SmartPPC</title>
    <base href="~/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <component type="typeof(Microsoft.AspNetCore.Components.Web.HeadOutlet)" render-mode="ServerPrerendered" />
    <style>
        body {
            margin: 0;
            font-family: Roboto, sans-serif;
        }
    </style>
</head>
<body>
    @RenderBody()

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script>
        // Function to download a file from JSON content
        function downloadFile(filename, content) {
            const blob = new Blob([content], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }

        // Function to trigger click on a hidden file input
        function triggerFileInput(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.click();
            }
        }

        // Function to login user via API (browser-side fetch)
        async function loginUser(email, password, redirectUrl) {
            try {
                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: email,
                        password: password,
                        rememberMe: false
                    }),
                    credentials: 'include' // Important: includes cookies
                });

                if (response.ok) {
                    // Success! Redirect to target page
                    window.location.href = redirectUrl;
                    return true;
                }

                // Failed authentication
                return false;
            } catch (error) {
                console.error('Login error:', error);
                return false;
            }
        }

        // Function to register user via API (browser-side fetch)
        async function registerUser(email, password, confirmPassword) {
            try {
                const response = await fetch('/api/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: email,
                        password: password,
                        confirmPassword: confirmPassword
                    }),
                    credentials: 'include' // Important: includes cookies
                });

                if (response.ok) {
                    // Success! Redirect to home page
                    window.location.href = '/';
                    return { success: true };
                }

                // Failed registration - try to get error message
                try {
                    const errorData = await response.json();
                    return {
                        success: false,
                        error: errorData.error || 'Registration failed',
                        errors: errorData.errors || []
                    };
                } catch {
                    return {
                        success: false,
                        error: 'Registration failed'
                    };
                }
            } catch (error) {
                console.error('Registration error:', error);
                return {
                    success: false,
                    error: 'An error occurred during registration'
                };
            }
        }

        // Function to logout user via API
        async function logoutUser() {
            try {
                await fetch('/api/auth/logout', {
                    method: 'POST',
                    credentials: 'include'
                });
            } catch (error) {
                console.error('Logout error:', error);
            }
            // Always redirect to login
            window.location.href = '/Authentication/Login';
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
