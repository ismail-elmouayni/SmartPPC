@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using SmartPPC.Core.Domain
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="@_model" OnValidSubmit="HandleChangePassword">
            <MudTextField @bind-Value="_model.CurrentPassword"
                          Label="Current Password"
                          Variant="Variant.Outlined"
                          InputType="@(_showCurrentPassword ? InputType.Text : InputType.Password)"
                          Required="true"
                          RequiredError="Current password is required"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          Class="mb-4"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showCurrentPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          OnAdornmentClick="() => _showCurrentPassword = !_showCurrentPassword" />

            <MudTextField @bind-Value="_model.NewPassword"
                          Label="New Password"
                          Variant="Variant.Outlined"
                          InputType="@(_showNewPassword ? InputType.Text : InputType.Password)"
                          Required="true"
                          RequiredError="New password is required"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          Class="mb-4"
                          HelperText="At least 6 characters with uppercase, lowercase, and digit"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showNewPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          OnAdornmentClick="() => _showNewPassword = !_showNewPassword" />

            <MudTextField @bind-Value="_model.ConfirmNewPassword"
                          Label="Confirm New Password"
                          Variant="Variant.Outlined"
                          InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                          Required="true"
                          RequiredError="Please confirm your new password"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          OnAdornmentClick="() => _showConfirmPassword = !_showConfirmPassword" />
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="MudBlazor.Color.Default">Cancel</MudButton>
        <MudButton OnClick="HandleChangePassword"
                   Color="MudBlazor.Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@_isChanging">
            @if (_isChanging)
            {
                <MudProgressCircular Size="MudBlazor.Size.Small" Indeterminate="true" Class="mr-2" />
                <span>Changing...</span>
            }
            else
            {
                <span>Change Password</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private ChangePasswordModel _model = new();
    private bool _isChanging = false;
    private bool _showCurrentPassword = false;
    private bool _showNewPassword = false;
    private bool _showConfirmPassword = false;

    private async Task HandleChangePassword()
    {
        if (_model.NewPassword != _model.ConfirmNewPassword)
        {
            Snackbar.Add("New passwords do not match.", Severity.Error);
            return;
        }

        _isChanging = true;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userPrincipal = authState.User;
            var user = await UserManager.GetUserAsync(userPrincipal);

            if (user == null)
            {
                Snackbar.Add("User not found.", Severity.Error);
                return;
            }

            var result = await UserManager.ChangePasswordAsync(user, _model.CurrentPassword, _model.NewPassword);

            if (result.Succeeded)
            {
                MudDialog?.Close(DialogResult.Ok(true));
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                Snackbar.Add($"Failed to change password: {errors}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isChanging = false;
        }
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private class ChangePasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmNewPassword { get; set; } = string.Empty;
    }
}
