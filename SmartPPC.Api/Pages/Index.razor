@page "/"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using SmartPPC.Api.Services
@using SmartPPC.Core.Model.DDMRP
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using MudBlazor
@using SmartPPC.Api.Pages.Shared
@inject ConfigurationService ConfigService
@inject ConfigurationStateService StateService
@inject ILogger<Index> Logger
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-6" Elevation="2">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <div>
                    <MudText Typo="Typo.h3" Class="mb-2">SmartPPC - Production Planning & Control</MudText>
                    <MudText Typo="Typo.body1" Color="MudColor.Secondary">
                        Demand-Driven Material Requirements Planning (DDMRP) System
                    </MudText>
                    @if (!string.IsNullOrEmpty(currentConfigName))
                    {
                        <MudChip T="string" Size="MudBlazor.Size.Small" Color="MudColor.Success" Class="mt-2">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="MudBlazor.Size.Small" Class="mr-1" />
                            @currentConfigName
                        </MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Size="MudBlazor.Size.Small" Color="MudColor.Warning" Class="mt-2">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Size="MudBlazor.Size.Small" Class="mr-1" />
                            No configuration loaded
                        </MudChip>
                    }
                </div>
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Outlined"
                               Color="MudColor.Primary"
                               StartIcon="@Icons.Material.Filled.FolderOpen"
                               OnClick="OpenLoadConfigModal">
                        Load Config
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="MudColor.Primary"
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveCurrentConfiguration"
                               Disabled="@(!HasLoadedConfig)"
                               Title="@(HasLoadedConfig ? "Save current configuration" : "No configuration loaded")">
                        Save Config
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="MudColor.Primary"
                               StartIcon="@Icons.Material.Filled.Upload"
                               OnClick="OpenUploadConfigModal">
                        Upload Config
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="MudColor.Primary"
                               StartIcon="@Icons.Material.Filled.Download"
                               OnClick="DownloadConfiguration"
                               Disabled="@(!HasLoadedConfig)">
                        Download Config
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" /> General Settings
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Configure planning horizons and global parameters for the DDMRP model.
                </MudText>
                <MudButton Href="/Settings/GeneralSettings" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
                    Configure
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.AccountTree" /> Stations
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Define production stations, buffers, and flow connections.
                </MudText>
                <MudButton Href="/Stations/StationConfig" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
                    Configure
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" /> Demand Forecast
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Set demand forecasts for output stations across planning horizon.
                </MudText>
                <MudButton Href="/Forecast/DemandForecast" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
                    Configure
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.PlayArrow" /> Solver
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Run the genetic algorithm solver to optimize production planning.
                </MudText>
                <MudButton Href="/SolverPage" Variant="Variant.Filled" Color="MudColor.Success" FullWidth="true">
                    Run Solver
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">Configuration Status</MudText>
            <MudList T="string">
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="@(ModelInputs.PlanningHorizon > 0 ? MudColor.Success : MudColor.Default)">
                    <MudText>Planning Horizon: <strong>@ModelInputs.PlanningHorizon periods</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="@(ModelInputs.NumberOfStations > 0 ? MudColor.Success : MudColor.Default)">
                    <MudText>Stations Configured: <strong>@ModelInputs.NumberOfStations</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="@(OutputStationsCount > 0 ? MudColor.Success : MudColor.Default)">
                    <MudText>Output Stations: <strong>@OutputStationsCount</strong></MudText>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">Quick Start Guide</MudText>
            <MudList T="string" Dense="true">
                <MudListItem T="string" Icon="@Icons.Material.Filled.LooksOne">
                    <MudText>Set planning horizons in <strong>General Settings</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.LooksTwo">
                    <MudText>Configure production stations and flows in <strong>Stations</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.Looks3">
                    <MudText>Define demand forecasts in <strong>Demand Forecast</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.Looks4">
                    <MudText>Run optimization in <strong>Solver</strong></MudText>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private ModelInputs ModelInputs { get; set; } = new ModelInputs();
    private int OutputStationsCount { get; set; }
    private Guid? currentConfigId;
    private string currentConfigName = string.Empty;
    private bool HasLoadedConfig => currentConfigId.HasValue && !string.IsNullOrEmpty(currentConfigName);

    protected override async Task OnInitializedAsync()
    {
        await LoadActiveConfiguration();
    }

    private async Task LoadActiveConfiguration()
    {
        try
        {
            // Try to load active configuration from database
            var config = await ConfigService.LoadActiveConfigurationAsync();

            if (config != null)
            {
                ModelInputs = config;

                // Get the active configuration details
                var configs = await ConfigService.GetAllConfigurationsAsync();
                var activeConfig = configs.FirstOrDefault(c => c.IsActive);

                if (activeConfig != null)
                {
                    currentConfigId = activeConfig.Id;
                    currentConfigName = activeConfig.Name;

                    // Update state service so other pages can access this configuration
                    StateService.SetConfiguration(currentConfigId, currentConfigName, ModelInputs);
                }
            }
            else
            {
                // No active configuration - create default
                ModelInputs = ConfigService.CreateDefaultConfiguration();
                currentConfigId = null;
                currentConfigName = string.Empty;

                // Clear state service
                StateService.ClearConfiguration();
            }

            UpdateOutputStationsCount();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading active configuration");
            ModelInputs = ConfigService.CreateDefaultConfiguration();
            currentConfigId = null;
            currentConfigName = string.Empty;
            UpdateOutputStationsCount();

            // Clear state service
            StateService.ClearConfiguration();
        }
    }

    private void UpdateOutputStationsCount()
    {
        OutputStationsCount = ModelInputs.StationDeclarations?
            .Count(s => s.NextStationsInput == null || !s.NextStationsInput.Any()) ?? 0;
    }

    private async Task DownloadConfiguration()
    {
        if (!HasLoadedConfig)
        {
            Snackbar.Add("No configuration loaded to download", Severity.Warning);
            return;
        }

        try
        {
            var jsonContent = Newtonsoft.Json.JsonConvert.SerializeObject(ModelInputs, Newtonsoft.Json.Formatting.Indented);
            var fileName = $"{currentConfigName}_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.json";

            // Use JavaScript interop to trigger download
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, jsonContent);
            Snackbar.Add("Configuration downloaded successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading configuration");
            Snackbar.Add($"Error downloading configuration: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenLoadConfigModal()
    {
        var dialog = await DialogService.ShowAsync<LoadConfigModal>("Load Configuration", new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });

        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is LoadConfigModal.LoadConfigResult loadResult)
        {
            if (loadResult.IsNewConfig)
            {
                // Create new configuration with the provided name
                currentConfigName = loadResult.ConfigName;
                ModelInputs = ConfigService.CreateDefaultConfiguration();
                UpdateOutputStationsCount();

                try
                {
                    // Save the new configuration to database immediately
                    currentConfigId = await ConfigService.SaveConfigurationToDatabaseAsync(
                        currentConfigName,
                        ModelInputs,
                        setAsActive: true);

                    // Update state service with the new configuration
                    StateService.SetConfiguration(currentConfigId, currentConfigName, ModelInputs);

                    Snackbar.Add($"New configuration '{currentConfigName}' created successfully!", Severity.Success);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error creating new configuration");
                    Snackbar.Add($"Error creating configuration: {ex.Message}", Severity.Error);
                    currentConfigId = null;
                    currentConfigName = string.Empty;
                    StateService.ClearConfiguration();
                }
            }
            else if (loadResult.ConfigId.HasValue)
            {
                // Load existing configuration
                try
                {
                    var config = await ConfigService.LoadConfigurationFromDatabaseAsync(loadResult.ConfigId.Value);
                    if (config != null)
                    {
                        ModelInputs = config;
                        currentConfigId = loadResult.ConfigId;
                        currentConfigName = loadResult.ConfigName;

                        // Set as active
                        await ConfigService.SetActiveConfigurationAsync(loadResult.ConfigId.Value);

                        UpdateOutputStationsCount();

                        // Update state service with loaded configuration
                        StateService.SetConfiguration(currentConfigId, currentConfigName, ModelInputs);

                        Snackbar.Add($"Configuration '{currentConfigName}' loaded successfully!", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Failed to load configuration", Severity.Error);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error loading configuration");
                    Snackbar.Add($"Error loading configuration: {ex.Message}", Severity.Error);
                }
            }

            StateHasChanged();
        }
    }

    private async Task OpenUploadConfigModal()
    {
        var dialog = await DialogService.ShowAsync<UploadConfigModal>("Upload Configuration", new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });

        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is UploadConfigModal.UploadConfigResult uploadResult)
        {
            if (uploadResult.AppliedToContext && uploadResult.Config != null)
            {
                // Apply the uploaded configuration to the current context
                ModelInputs = uploadResult.Config;
                currentConfigId = uploadResult.ConfigId;
                currentConfigName = uploadResult.ConfigName;
                UpdateOutputStationsCount();

                // Update state service with uploaded configuration
                StateService.SetConfiguration(currentConfigId, currentConfigName, ModelInputs);

                Snackbar.Add($"Configuration '{currentConfigName}' uploaded and applied successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Configuration '{uploadResult.ConfigName}' uploaded successfully (not applied to current context)", Severity.Success);
            }

            StateHasChanged();
        }
    }

    private async Task SaveCurrentConfiguration()
    {
        if (!HasLoadedConfig)
        {
            Snackbar.Add("No configuration loaded. Please load or create a configuration first.", Severity.Warning);
            return;
        }

        try
        {
            if (currentConfigId.HasValue)
            {
                // Update existing configuration
                await ConfigService.UpdateConfigurationInDatabaseAsync(currentConfigId.Value, ModelInputs, setAsActive: true);

                // Update state service
                StateService.SetConfiguration(currentConfigId, currentConfigName, ModelInputs);

                Snackbar.Add($"Configuration '{currentConfigName}' saved successfully!", Severity.Success);
            }
            else
            {
                // Create new configuration
                var configId = await ConfigService.SaveConfigurationToDatabaseAsync(currentConfigName, ModelInputs, setAsActive: true);
                currentConfigId = configId;

                // Update state service with new config ID
                StateService.SetConfiguration(currentConfigId, currentConfigName, ModelInputs);

                Snackbar.Add($"Configuration '{currentConfigName}' created and saved successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving configuration");
            Snackbar.Add($"Error saving configuration: {ex.Message}", Severity.Error);
        }
    }
}
