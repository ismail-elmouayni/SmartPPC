@page "/"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using SmartPPC.Api.Services
@using SmartPPC.Core.Model.DDMRP
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject ConfigurationService ConfigService
@inject ILogger<Index> Logger
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-6" Elevation="2">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <div>
                    <MudText Typo="Typo.h3" Class="mb-2">SmartPPC - Production Planning & Control</MudText>
                    <MudText Typo="Typo.body1" Color="MudColor.Secondary">
                        Demand-Driven Material Requirements Planning (DDMRP) System
                    </MudText>
                </div>
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Outlined"
                               Color="MudColor.Primary"
                               StartIcon="@Icons.Material.Filled.Download"
                               OnClick="DownloadConfiguration">
                        Download Config
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="MudColor.Primary"
                               StartIcon="@Icons.Material.Filled.Upload"
                               OnClick="TriggerFileUpload">
                        Upload Config
                    </MudButton>
                    <InputFile id="fileUpload" OnChange="UploadConfiguration" style="display: none;" accept=".json" />
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" /> General Settings
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Configure planning horizons and global parameters for the DDMRP model.
                </MudText>
                <MudButton Href="/Settings/GeneralSettings" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
                    Configure
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.AccountTree" /> Stations
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Define production stations, buffers, and flow connections.
                </MudText>
                <MudButton Href="/Stations/StationConfig" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
                    Configure
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" /> Demand Forecast
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Set demand forecasts for output stations across planning horizon.
                </MudText>
                <MudButton Href="/Forecast/DemandForecast" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
                    Configure
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6" lg="3">
        <MudCard Elevation="3" Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="MudColor.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.PlayArrow" /> Solver
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">
                    Run the genetic algorithm solver to optimize production planning.
                </MudText>
                <MudButton Href="/SolverPage" Variant="Variant.Filled" Color="MudColor.Success" FullWidth="true">
                    Run Solver
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">Configuration Status</MudText>
            <MudList T="string">
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="@(ModelInputs.PlanningHorizon > 0 ? MudColor.Success : MudColor.Default)">
                    <MudText>Planning Horizon: <strong>@ModelInputs.PlanningHorizon periods</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="@(ModelInputs.NumberOfStations > 0 ? MudColor.Success : MudColor.Default)">
                    <MudText>Stations Configured: <strong>@ModelInputs.NumberOfStations</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="@(OutputStationsCount > 0 ? MudColor.Success : MudColor.Default)">
                    <MudText>Output Stations: <strong>@OutputStationsCount</strong></MudText>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">Quick Start Guide</MudText>
            <MudList T="string" Dense="true">
                <MudListItem T="string" Icon="@Icons.Material.Filled.LooksOne">
                    <MudText>Set planning horizons in <strong>General Settings</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.LooksTwo">
                    <MudText>Configure production stations and flows in <strong>Stations</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.Looks3">
                    <MudText>Define demand forecasts in <strong>Demand Forecast</strong></MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.Looks4">
                    <MudText>Run optimization in <strong>Solver</strong></MudText>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private ModelInputs ModelInputs { get; set; } = new ModelInputs();
    private int OutputStationsCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationData();
    }

    private async Task LoadConfigurationData()
    {
        try
        {
            var config = await ConfigService.LoadConfigurationAsync();
            ModelInputs = config ?? ConfigService.CreateDefaultConfiguration();

            OutputStationsCount = ModelInputs.StationDeclarations?
                .Count(s => s.DemandForecast != null || s.DemandVariability.HasValue) ?? 0;

            StateHasChanged(); // Refresh the UI
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configuration");
            ModelInputs = ConfigService.CreateDefaultConfiguration();
            OutputStationsCount = 0;
        }
    }

    private async Task DownloadConfiguration()
    {
        try
        {
            var config = await ConfigService.LoadConfigurationAsync();
            if (config == null)
            {
                Snackbar.Add("No configuration available to download", Severity.Warning);
                return;
            }

            var jsonContent = Newtonsoft.Json.JsonConvert.SerializeObject(config, Newtonsoft.Json.Formatting.Indented);
            var fileName = $"SmartPPC_Config_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.json";

            // Use JavaScript interop to trigger download
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, jsonContent);
            Snackbar.Add("Configuration downloaded successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading configuration");
            Snackbar.Add($"Error downloading configuration: {ex.Message}", Severity.Error);
        }
    }

    private async Task TriggerFileUpload()
    {
        // Trigger the hidden file input
        await JSRuntime.InvokeVoidAsync("document.getElementById('fileUpload').click");
    }

    private async Task UploadConfiguration(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
            {
                Snackbar.Add("No file selected", Severity.Warning);
                return;
            }

            // Validate file extension
            if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                Snackbar.Add("Please upload a JSON file", Severity.Error);
                return;
            }

            // Read file content
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB max
            using var reader = new StreamReader(stream);
            var jsonContent = await reader.ReadToEndAsync();

            // Deserialize to ModelInputs
            ModelInputs? uploadedConfig;
            try
            {
                uploadedConfig = Newtonsoft.Json.JsonConvert.DeserializeObject<ModelInputs>(jsonContent);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Invalid JSON format: {ex.Message}", Severity.Error);
                return;
            }

            if (uploadedConfig == null)
            {
                Snackbar.Add("Failed to parse configuration file", Severity.Error);
                return;
            }

            // Validate configuration with business rules
            var validationResult = await ConfigService.ValidateConfigurationWithBusinessRules(uploadedConfig);
            if (!validationResult.IsSuccess)
            {
                var errorMessage = string.Join("\n", validationResult.Errors);
                Snackbar.Add($"Configuration validation failed:\n{errorMessage}", Severity.Error);
                return;
            }

            // Save configuration
            await ConfigService.SaveConfigurationAsync(uploadedConfig);
            Snackbar.Add("Configuration uploaded and saved successfully!", Severity.Success);

            // Reload the configuration data to update the UI
            await LoadConfigurationData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading configuration");
            Snackbar.Add($"Error uploading configuration: {ex.Message}", Severity.Error);
        }
    }
}
