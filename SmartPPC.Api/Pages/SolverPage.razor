@page "/SolverPage"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using SmartPPC.Api.Services
@using SmartPPC.Core.Model.DDMRP
@using SmartPPC.Core.Solver.GA
@using FluentResults
@using Newtonsoft.Json
@inject ConfigurationService ConfigService
@inject ConfigurationStateService StateService
@inject ILogger<SolverPage> Logger
@inject IJSRuntime JSRuntime

<div style="padding: 20px;">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-6" Elevation="2">
                <MudText Typo="Typo.h4" Class="mb-4">Production Planning Solver</MudText>

                @if (!HasConfiguration)
                {
                    <MudAlert Severity="Severity.Warning" Class="mb-4">
                        No configuration found. Please configure the system before running the solver.
                    </MudAlert>
                }
                else
                {
                    <MudText Typo="Typo.body1" Class="mb-4">
                        Run the genetic algorithm solver to optimize production planning based on your current configuration.
                    </MudText>

                    <MudGrid Class="mb-4">
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="MudColor.Secondary">Planning Horizon</MudText>
                                    <MudText Typo="Typo.h5">@ModelInputs.PlanningHorizon</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="MudColor.Secondary">Stations</MudText>
                                    <MudText Typo="Typo.h5">@ModelInputs.NumberOfStations</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="MudColor.Secondary">Output Stations</MudText>
                                    <MudText Typo="Typo.h5">@OutputStationsCount</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="MudColor.Secondary">Decision Variables</MudText>
                                    <MudText Typo="Typo.h5">@ModelInputs.NumberOfStations</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="my-4" />

                    <MudButton OnClick="RunSolver"
                               Variant="Variant.Filled"
                               Color="MudColor.Primary"
                               Size="MudSize.Large"
                               StartIcon="@Icons.Material.Filled.PlayArrow"
                               Disabled="@(!HasConfiguration || isRunning)">
                        @if (isRunning)
                        {
                            <MudProgressCircular Size="MudSize.Small" Indeterminate="true" Class="mr-2" />
                            <span>Running...</span>
                        }
                        else
                        {
                            <span>Run Optimization Solver</span>
                        }
                    </MudButton>
                }

                @if (errorMessage != null)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
                }
            </MudPaper>
        </MudItem>

        @if (Result != null)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-6" Elevation="2">
                    <MudAlert Severity="Severity.Success" Class="mb-4">
                        Optimization completed successfully!
                    </MudAlert>

                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="MudColor.Secondary">Avg Buffer Level</MudText>
                                    <MudText Typo="Typo.h5">@Result.Solution.GetAverageBuffersLevel().ToString("F2")</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="MudColor.Secondary">Avg Unsatisfied Demand</MudText>
                                    <MudText Typo="Typo.h5">@Result.Solution.GetAverageNotSatisfiedDemand().ToString("F2")</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="my-4" />

                    <MudText Typo="Typo.h6" Class="mb-3">Solution: Buffer Activation</MudText>
                    <MudText Typo="Typo.body2" Color="MudColor.Secondary" Class="mb-4">
                        Buffer activation status for each station.
                    </MudText>

                    <MudSimpleTable Striped="true" Dense="true" Hover="true" Bordered="true">
                        <thead>
                            <tr>
                                <th>Station Index</th>
                                <th>Buffer Activated</th>
                                <th>Expected Avg Buffer</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var gene in GetGeneDisplays())
                            {
                                <tr>
                                    <td>@gene.StationIndex</td>
                                    <td>
                                        @if (gene.Value == 1)
                                        {
                                            <MudChip T="string" Size="MudSize.Small" Color="MudColor.Success">Yes</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Size="MudSize.Small" Color="MudColor.Default">No</MudChip>
                                        }
                                    </td>
                                    <td>
                                        @if (gene.Value == 1)
                                        {
                                            @gene.AverageBufferLevel.ToString("F2")
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>

                    @if (Result.FitnessCurve != null && Result.FitnessCurve.Any())
                    {
                        <MudDivider Class="my-4" />

                        <MudText Typo="Typo.h6" Class="mb-3" Align="MudAlign.Center">Fitness Evolution</MudText>
                        <MudText Typo="Typo.body2" Color="MudColor.Secondary" Class="mb-4" Align="MudAlign.Center">
                            Best fitness value per generation (lower is better) - Final best value: <strong>@Result.FitnessCurve.Last().ToString("F4")</strong>
                        </MudText>

                        <div style="max-width: 900px; margin: 0 auto;">
                            @if (chartOptions != null)
                            {
                                <ApexChart TItem="FitnessPoint"
                                           Title=""
                                           Options="chartOptions"
                                           @ref="fitnessChart">
                                    <ApexPointSeries TItem="FitnessPoint"
                                                     Items="GetFitnessPoints()"
                                                     Name="Best Fitness"
                                                     SeriesType="SeriesType.Line"
                                                     XValue="@(e => e.Generation)"
                                                     YAggregate="@(e => e.Sum(f => (decimal)f.Fitness))"
                                                     OrderBy="e => e.X" />
                                </ApexChart>
                            }
                        </div>

                        <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
                            <MudButton OnClick="ToggleFitnessTable"
                                       Variant="Variant.Outlined"
                                       Color="MudColor.Primary"
                                       EndIcon="@(showFitnessTable ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)">
                                @(showFitnessTable ? "Hide" : "Show") Fitness Values Table
                            </MudButton>
                        </MudStack>

                        @if (showFitnessTable)
                        {
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Class="mb-3">Fitness Values</MudText>
                            <MudSimpleTable Striped="true" Dense="true" Hover="true" Style="max-height: 400px; overflow-y: auto;">
                                <thead>
                                    <tr>
                                        <th>Generation</th>
                                        <th>Best Fitness</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int gen = 0;
                                        foreach (var fitness in Result.FitnessCurve)
                                        {
                                            <tr>
                                                <td>@gen</td>
                                                <td>@fitness.ToString("F4")</td>
                                            </tr>
                                            gen++;
                                        }
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }

                        <MudDivider Class="my-4" />

                        <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
                            <MudButton OnClick="ToggleDemandTable"
                                       Variant="Variant.Outlined"
                                       Color="MudColor.Primary"
                                       EndIcon="@(showDemandTable ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)">
                                @(showDemandTable ? "Hide" : "Show") Demand Table
                            </MudButton>
                        </MudStack>

                        @if (showDemandTable && Result?.Solution?.Stations != null)
                        {
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Class="mb-3">Demand by Station</MudText>

                            <MudSelect T="int" Label="Select Station" Value="selectedStationIndex" ValueChanged="OnStationChanged" Class="mb-4" Variant="Variant.Outlined">
                                @for (int i = 0; i < Result.Solution.Stations.Count; i++)
                                {
                                    var stationIndex = i;
                                    <MudSelectItem T="int" Value="@stationIndex">Station @stationIndex</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSimpleTable Striped="true" Dense="true" Hover="true" Style="overflow-x: auto;">
                                <thead>
                                    <tr>
                                        <th>Period</th>
                                        @foreach (var demandPoint in GetDemandData())
                                        {
                                            <th>@demandPoint.Period</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td><strong>Demand</strong></td>
                                        @foreach (var demandPoint in GetDemandData())
                                        {
                                            <td>
                                                @if (demandPoint.Demand.HasValue)
                                                {
                                                    @demandPoint.Demand.Value
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </td>
                                        }
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        }
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</div>

@code {
    [CascadingParameter(Name = "IsDarkMode")]
    public bool IsDarkMode { get; set; }

    private ModelInputs ModelInputs { get; set; } = new ModelInputs();
    private OptimizationResult? Result { get; set; }
    private bool HasConfiguration { get; set; }
    private int OutputStationsCount { get; set; }
    private bool isRunning { get; set; }
    private string? errorMessage { get; set; }
    private bool showFitnessTable { get; set; } = false;
    private bool showDemandTable { get; set; } = false;
    private int selectedStationIndex { get; set; } = 0;
    private ApexChart<FitnessPoint>? fitnessChart;
    private bool _previousDarkMode = false;
    private ApexChartOptions<FitnessPoint>? chartOptions;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get configuration from state service
            if (StateService.HasConfiguration && StateService.CurrentConfiguration != null)
            {
                ModelInputs = StateService.CurrentConfiguration;
            }
            else
            {
                // No configuration loaded - use default
                ModelInputs = ConfigService.CreateDefaultConfiguration();
            }

            // Use state service to determine if configuration is loaded
            HasConfiguration = StateService.HasConfiguration;
            OutputStationsCount = ModelInputs.StationDeclarations?
                .Count(s => s.DemandForecast != null && s.DemandForecast.Any()) ?? 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configuration");
            ModelInputs = ConfigService.CreateDefaultConfiguration();
            HasConfiguration = false;
            OutputStationsCount = 0;
        }
    }

    protected override void OnParametersSet()
    {
        // Check if dark mode has changed
        if (IsDarkMode != _previousDarkMode)
        {
            _previousDarkMode = IsDarkMode;
            if (Result != null && Result.FitnessCurve != null && Result.FitnessCurve.Any())
            {
                UpdateChartOptions();
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && Result != null && Result.FitnessCurve != null && Result.FitnessCurve.Any())
        {
            _previousDarkMode = IsDarkMode;
            UpdateChartOptions();
            StateHasChanged();
        }
    }

    private async Task RunSolver()
    {
        try
        {
            isRunning = true;
            errorMessage = null;
            StateHasChanged();

            // Get current configuration from state service
            if (StateService.HasConfiguration && StateService.CurrentConfiguration != null)
            {
                ModelInputs = StateService.CurrentConfiguration;
            }
            else
            {
                ModelInputs = ConfigService.CreateDefaultConfiguration();
            }

            // Use state service to determine if configuration is loaded
            HasConfiguration = StateService.HasConfiguration;
            OutputStationsCount = ModelInputs.StationDeclarations?
                .Count(s => s.DemandForecast != null && s.DemandForecast.Any()) ?? 0;

            if (!HasConfiguration)
            {
                errorMessage = "No configuration loaded. Please load or create a configuration from the Dashboard first.";
                return;
            }

            // Validate that configuration has the necessary data to run the solver
            if (ModelInputs.NumberOfStations <= 0 || ModelInputs.PlanningHorizon <= 0)
            {
                errorMessage = "Configuration is incomplete. Please ensure you have configured stations and planning horizons before running the solver.";
                return;
            }

            Logger.LogInformation("Starting solver with configuration: {Stations} stations, {Horizon} planning horizon",
                ModelInputs.NumberOfStations, ModelInputs.PlanningHorizon);

            // Execute the solver
            var solver = new GnSolver();
            solver.Initialize(ModelInputs);
            var result = solver.Resolve();

            if (result.IsSuccess)
            {
                Result = result.Value as OptimizationResult;
                UpdateChartOptions();
                Logger.LogInformation("Solver completed successfully. Objective value: {ObjectiveValue}",
                    Result?.Solution?.ObjectiveFunctionValue);
            }
            else
            {
                Logger.LogError("Solver failed: {Errors}", string.Join(", ", result.Errors));
                errorMessage = "An error occurred while solving the problem: " +
                    string.Join(", ", result.Errors.Select(e => e.Message));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error executing solver");
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }

    private void ToggleFitnessTable()
    {
        showFitnessTable = !showFitnessTable;
    }

    private void ToggleDemandTable()
    {
        showDemandTable = !showDemandTable;
    }

    private void OnStationChanged(int newStationIndex)
    {
        selectedStationIndex = newStationIndex;
        StateHasChanged();
    }

    private List<DemandPoint> GetDemandData()
    {
        if (Result?.Solution?.Stations == null || selectedStationIndex >= Result.Solution.Stations.Count)
            return new List<DemandPoint>();

        var station = Result.Solution.Stations[selectedStationIndex];
        if (station.FutureStates == null || !station.FutureStates.Any())
            return new List<DemandPoint>();

        return station.FutureStates
            .Select(state => new DemandPoint
            {
                Period = state.Instant,
                Demand = state.Demand
            })
            .OrderBy(d => d.Period)
            .ToList();
    }

    private List<GeneDisplay> GetGeneDisplays()
    {
        if (Result?.Solution == null)
            return new List<GeneDisplay>();

        var genes = Result.Solution.ToGenes().ToList();
        var displays = new List<GeneDisplay>();

        for (int i = 0; i < genes.Count; i++)
        {
            var station = Result.Solution.Stations[i];
            displays.Add(new GeneDisplay
            {
                StationIndex = i,
                Value = (int)genes[i].Value,
                AverageBufferLevel = station.GetAverageBufferLevel()
            });
        }

        return displays;
    }

    private List<FitnessPoint> GetFitnessPoints()
    {
        if (Result?.FitnessCurve == null)
            return new List<FitnessPoint>();

        var points = new List<FitnessPoint>();
        int generation = 0;

        foreach (var fitness in Result.FitnessCurve)
        {
            points.Add(new FitnessPoint
            {
                Generation = generation,
                Fitness = fitness
            });
            generation++;
        }

        return points;
    }

    private void UpdateChartOptions()
    {
        if (Result?.FitnessCurve == null || !Result.FitnessCurve.Any())
        {
            chartOptions = null;
            return;
        }

        // Dynamic colors based on theme
        var backgroundColor = IsDarkMode ? "#1e1e1e" : "#ffffff";
        var textColor = IsDarkMode ? "#e0e0e0" : "#373d3f";
        var gridColor = IsDarkMode ? "#4a4a4a" : "#e0e0e0";
        var tooltipTheme = IsDarkMode ? Mode.Dark : Mode.Light;
        var chartMode = IsDarkMode ? Mode.Dark : Mode.Light;

        chartOptions = new ApexChartOptions<FitnessPoint>
        {
            Chart = new Chart
            {
                Background = backgroundColor,
                ForeColor = textColor,
                Toolbar = new Toolbar
                {
                    Show = true,
                    Tools = new Tools
                    {
                        Download = false,
                        Selection = false,
                        Zoom = true,
                        Zoomin = true,
                        Zoomout = true,
                        Pan = false,
                        Reset = true
                    }
                },
                Zoom = new Zoom
                {
                    Enabled = false
                }
            },
            Stroke = new Stroke
            {
                Width = new List<double> { 3 },
                Curve = new List<ApexCharts.Curve> { ApexCharts.Curve.Smooth }
            },
            Markers = new Markers
            {
                Size = new List<double> { 4 },
                Hover = new MarkersHover
                {
                    Size = 7
                }
            },
            Grid = new Grid
            {
                Show = true,
                BorderColor = gridColor,
                StrokeDashArray = 3
            },
            Xaxis = new XAxis
            {
                Title = new AxisTitle
                {
                    Text = "Generation",
                    Style = new AxisTitleStyle
                    {
                        Color = textColor
                    }
                },
                Labels = new XAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        Colors = new List<string> { textColor }
                    }
                }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Title = new AxisTitle
                    {
                        Text = "Fitness Value",
                        Style = new AxisTitleStyle
                        {
                            Color = textColor
                        }
                    },
                    DecimalsInFloat = 4,
                    Labels = new YAxisLabels
                    {
                        Style = new AxisLabelStyle
                        {
                            Colors = new List<string> { textColor }
                        }
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Enabled = true,
                Shared = false,
                FollowCursor = true,
                Theme = tooltipTheme,
                Style = new TooltipStyle
                {
                    FontSize = "14px"
                }
            },
            Theme = new Theme
            {
                Mode = chartMode,
                Palette = PaletteType.Palette1
            },
            Colors = new List<string> { "#1976d2" }
        };
    }

    public class GeneDisplay
    {
        public int StationIndex { get; set; }
        public int Value { get; set; }
        public float AverageBufferLevel { get; set; }
    }

    public class FitnessPoint
    {
        public int Generation { get; set; }
        public double Fitness { get; set; }
    }

    public class DemandPoint
    {
        public int Period { get; set; }
        public int? Demand { get; set; }
    }
}
