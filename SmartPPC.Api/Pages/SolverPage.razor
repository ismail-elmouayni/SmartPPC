@page "/SolverPage"
@using MudBlazor
@using SmartPPC.Api.Services
@using SmartPPC.Core.Model.DDMRP
@using SmartPPC.Core.Solver.GA
@using FluentResults
@using Newtonsoft.Json
@inject ConfigurationService ConfigService
@inject ILogger<SolverPage> Logger

<div style="padding: 20px;">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-6" Elevation="2">
                <MudText Typo="Typo.h4" Class="mb-4">Production Planning Solver</MudText>

                @if (!HasConfiguration)
                {
                    <MudAlert Severity="Severity.Warning" Class="mb-4">
                        No configuration found. Please configure the system before running the solver.
                    </MudAlert>
                }
                else
                {
                    <MudText Typo="Typo.body1" Class="mb-4">
                        Run the genetic algorithm solver to optimize production planning based on your current configuration.
                    </MudText>

                    <MudGrid Class="mb-4">
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Planning Horizon</MudText>
                                    <MudText Typo="Typo.h5">@ModelInputs.PlanningHorizon</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Stations</MudText>
                                    <MudText Typo="Typo.h5">@ModelInputs.NumberOfStations</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Output Stations</MudText>
                                    <MudText Typo="Typo.h5">@OutputStationsCount</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Decision Variables</MudText>
                                    <MudText Typo="Typo.h5">@ModelInputs.NumberOfStations</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="my-4" />

                    <MudButton OnClick="RunSolver"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               StartIcon="@Icons.Material.Filled.PlayArrow"
                               Disabled="@(!HasConfiguration || isRunning)">
                        @if (isRunning)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            <span>Running...</span>
                        }
                        else
                        {
                            <span>Run Optimization Solver</span>
                        }
                    </MudButton>
                }

                @if (errorMessage != null)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
                }
            </MudPaper>
        </MudItem>

        @if (Result != null)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-6" Elevation="2">
                    <MudAlert Severity="Severity.Success" Class="mb-4">
                        Optimization completed successfully!
                    </MudAlert>

                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Objective Function Value</MudText>
                                    <MudText Typo="Typo.h5">@(Result.Solution.ObjectiveFunctionValue?.ToString("F2") ?? "N/A")</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Avg Buffer Level</MudText>
                                    <MudText Typo="Typo.h5">@Result.Solution.GetAverageBuffersLevel().ToString("F2")</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="1">
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Avg Unsatisfied Demand</MudText>
                                    <MudText Typo="Typo.h5">@Result.Solution.GetAverageNotSatisfiedDemand().ToString("F2")</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="my-4" />

                    <MudText Typo="Typo.h6" Class="mb-3">Solution: Buffer Activation Genes</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                        Each gene represents whether a buffer should be activated (1) or not (0) for each station.
                    </MudText>

                    <MudSimpleTable Striped="true" Dense="true" Hover="true" Bordered="true">
                        <thead>
                            <tr>
                                <th>Station Index</th>
                                <th>Buffer Activated</th>
                                <th>Gene Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var gene in GetGeneDisplays())
                            {
                                <tr>
                                    <td>@gene.StationIndex</td>
                                    <td>
                                        @if (gene.Value == 1)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success">Yes</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Default">No</MudChip>
                                        }
                                    </td>
                                    <td>@gene.Value</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>

                    @if (Result.FitnessCurve != null && Result.FitnessCurve.Any())
                    {
                        <MudDivider Class="my-4" />

                        <MudText Typo="Typo.h6" Class="mb-3">Fitness Evolution</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                            Best fitness value per generation (lower is better)
                        </MudText>
                        <MudSimpleTable Striped="true" Dense="true" Hover="true" Style="max-height: 300px; overflow-y: auto;">
                            <thead>
                                <tr>
                                    <th>Generation</th>
                                    <th>Best Fitness</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int gen = 0;
                                    foreach (var fitness in Result.FitnessCurve.Take(20))
                                    {
                                        <tr>
                                            <td>@gen</td>
                                            <td>@fitness.ToString("F4")</td>
                                        </tr>
                                        gen++;
                                    }
                                    if (Result.FitnessCurve.Count() > 20)
                                    {
                                        <tr>
                                            <td colspan="2" style="text-align: center;">
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    ... (@(Result.FitnessCurve.Count() - 20) more generations)
                                                </MudText>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </MudSimpleTable>
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</div>

@code {
    private ModelInputs ModelInputs { get; set; } = new ModelInputs();
    private OptimizationResult? Result { get; set; }
    private bool HasConfiguration { get; set; }
    private int OutputStationsCount { get; set; }
    private bool isRunning { get; set; }
    private string? errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var config = await ConfigService.LoadConfigurationAsync();
            ModelInputs = config ?? ConfigService.CreateDefaultConfiguration();
            HasConfiguration = ModelInputs.NumberOfStations > 0 && ModelInputs.PlanningHorizon > 0;
            OutputStationsCount = ModelInputs.StationDeclarations?
                .Count(s => s.DemandForecast != null && s.DemandForecast.Any()) ?? 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configuration");
            ModelInputs = ConfigService.CreateDefaultConfiguration();
            HasConfiguration = false;
            OutputStationsCount = 0;
        }
    }

    private async Task RunSolver()
    {
        try
        {
            isRunning = true;
            errorMessage = null;
            StateHasChanged();

            // Load current configuration
            ModelInputs = await ConfigService.LoadConfigurationAsync() ?? ConfigService.CreateDefaultConfiguration();
            HasConfiguration = ModelInputs.NumberOfStations > 0 && ModelInputs.PlanningHorizon > 0;
            OutputStationsCount = ModelInputs.StationDeclarations?
                .Count(s => s.DemandForecast != null && s.DemandForecast.Any()) ?? 0;

            if (!HasConfiguration)
            {
                errorMessage = "No valid configuration found. Please configure the system first.";
                return;
            }

            // Save the ModelInputs to a temporary JSON file
            var tempFilePath = Path.GetTempFileName();
            await System.IO.File.WriteAllTextAsync(tempFilePath, JsonConvert.SerializeObject(ModelInputs));

            Logger.LogInformation("Starting solver with configuration: {Stations} stations, {Horizon} planning horizon",
                ModelInputs.NumberOfStations, ModelInputs.PlanningHorizon);

            // Execute the solver
            var solver = new GnSolver();
            solver.Initialize(tempFilePath);
            var result = solver.Resolve();

            if (result.IsSuccess)
            {
                Result = result.Value as OptimizationResult;
                Logger.LogInformation("Solver completed successfully. Objective value: {ObjectiveValue}",
                    Result?.Solution?.ObjectiveFunctionValue);
            }
            else
            {
                Logger.LogError("Solver failed: {Errors}", string.Join(", ", result.Errors));
                errorMessage = "An error occurred while solving the problem: " +
                    string.Join(", ", result.Errors.Select(e => e.Message));
            }

            // Clean up temp file
            if (System.IO.File.Exists(tempFilePath))
            {
                System.IO.File.Delete(tempFilePath);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error executing solver");
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }

    private List<GeneDisplay> GetGeneDisplays()
    {
        if (Result?.Solution == null)
            return new List<GeneDisplay>();

        var genes = Result.Solution.ToGenes().ToList();
        var displays = new List<GeneDisplay>();

        for (int i = 0; i < genes.Count; i++)
        {
            displays.Add(new GeneDisplay
            {
                StationIndex = i,
                Value = (int)genes[i].Value
            });
        }

        return displays;
    }

    public class GeneDisplay
    {
        public int StationIndex { get; set; }
        public int Value { get; set; }
    }
}
